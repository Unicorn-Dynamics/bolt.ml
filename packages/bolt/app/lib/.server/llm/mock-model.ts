// mock model for local development and testing
export interface MockModelOptions {
  delay?: number; // simulate network delay
  responseType?: 'success' | 'error' | 'random';
  customResponse?: string;
}

export function createMockModel(options: MockModelOptions = {}) {
  const { delay = 1000, responseType = 'success', customResponse } = options;

  return {
    async *textStream(prompt: string) {
      // simulate network delay
      await new Promise((resolve) => setTimeout(resolve, delay));

      let response: string;

      switch (responseType) {
        case 'error': {
          throw new Error('Mock model error for testing');
        }

        case 'random': {
          response = getRandomResponse();
          break;
        }

        case 'success':
        default: {
          response = customResponse || generateMockResponse(prompt);
        }
      }

      // simulate streaming by yielding chunks
      const words = response.split(' ');

      for (let i = 0; i < words.length; i++) {
        yield {
          type: 'text-delta' as const,
          textDelta: words[i] + (i < words.length - 1 ? ' ' : ''),
        };

        // small delay between words for realistic streaming
        await new Promise((resolve) => setTimeout(resolve, 50));
      }

      yield {
        type: 'finish' as const,
        finishReason: 'stop' as const,
        usage: {
          promptTokens: prompt.length / 4, // rough estimate
          completionTokens: response.length / 4,
          totalTokens: (prompt.length + response.length) / 4,
        },
      };
    },

    async generate(prompt: string) {
      const response = customResponse || generateMockResponse(prompt);
      await new Promise((resolve) => setTimeout(resolve, delay));

      return {
        text: response,
        usage: {
          promptTokens: prompt.length / 4,
          completionTokens: response.length / 4,
          totalTokens: (prompt.length + response.length) / 4,
        },
      };
    },
  };
}

function generateMockResponse(prompt: string): string {
  // simple pattern matching for realistic responses
  const lowerPrompt = prompt.toLowerCase();

  if (lowerPrompt.includes('create') || lowerPrompt.includes('build') || lowerPrompt.includes('make')) {
    return `I'll help you create that! Here's a basic implementation:

\`\`\`javascript
// Mock implementation
function example() {
  console.log('This is a mock response for testing');
  return 'Mock result';
}
\`\`\`

This is a mock response generated for local testing. In a real implementation, this would be generated by the actual AI model.`;
  }

  if (lowerPrompt.includes('debug') || lowerPrompt.includes('error') || lowerPrompt.includes('fix')) {
    return `I can help you debug this issue. Here are some steps to try:

1. Check the console for error messages
2. Verify your imports and dependencies
3. Make sure all variables are properly defined

This is a mock debugging response for local testing.`;
  }

  if (lowerPrompt.includes('explain') || lowerPrompt.includes('how') || lowerPrompt.includes('what')) {
    return `Let me explain this concept:

This is a mock explanation response. In a real implementation, this would provide detailed explanations based on the actual query.

Key points:
- Mock responses help with development
- They simulate real AI behavior
- Perfect for testing without API costs`;
  }

  // default response
  return `This is a mock response for local development and testing. 

Your prompt was: "${prompt.slice(0, 100)}${prompt.length > 100 ? '...' : ''}"

In a real implementation, this would be processed by an actual AI model. This mock response helps you test the application flow without needing API keys.`;
}

function getRandomResponse(): string {
  const responses = [
    "Here's a random mock response for testing variability.",
    'This is another mock response to simulate different AI outputs.',
    'Random mock response #3 - testing various scenarios.',
    "Mock response with some code:\n\n```js\nconsole.log('test');\n```",
    'A longer mock response that includes multiple paragraphs.\n\nThis helps test how the UI handles different response lengths and formats.',
  ];

  return responses[Math.floor(Math.random() * responses.length)];
}

import { useState } from 'react';
import type { DiagnosticResult, DiagnosticTest } from '~/routes/api.diagnostics';

interface DiagnosticsProps {
  isOpen: boolean;
  onClose: () => void;
}

export function Diagnostics({ isOpen, onClose }: DiagnosticsProps) {
  const [result, setResult] = useState<DiagnosticResult | null>(null);
  const [isRunning, setIsRunning] = useState(false);
  const [selectedTests, setSelectedTests] = useState<string[]>([]);

  const allTests = [
    { id: 'auth', name: 'Authentication', description: 'Auth bypass and session handling' },
    { id: 'personas', name: 'Personas', description: 'AI assistant personality system' },
    { id: 'models', name: 'AI Models', description: 'Model configuration and availability' },
    { id: 'ollama', name: 'Ollama', description: 'Local AI model server' },
    { id: 'mock', name: 'Mock Model', description: 'Development testing model' },
    { id: 'api_key', name: 'API Key', description: 'Anthropic API configuration' },
    { id: 'environment', name: 'Environment', description: 'Development settings' },
    { id: 'webcontainer', name: 'WebContainer', description: 'Browser runtime capabilities' },
  ];

  const runDiagnostics = async (testIds?: string[]) => {
    setIsRunning(true);
    setResult(null);

    try {
      const response = await fetch('/api/diagnostics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ testIds }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const diagnosticResult = await response.json();
      setResult(diagnosticResult);
    } catch (error) {
      console.error('Diagnostics failed:', error);
      setResult({
        timestamp: new Date().toISOString(),
        tests: [
          {
            id: 'connection',
            name: 'Connection Test',
            description: 'Test API connectivity',
            status: 'failed',
            message: error instanceof Error ? error.message : 'Unknown error',
          },
        ],
        summary: { total: 1, passed: 0, failed: 1, warnings: 0 },
      });
    } finally {
      setIsRunning(false);
    }
  };

  const toggleTest = (testId: string) => {
    setSelectedTests((prev) => (prev.includes(testId) ? prev.filter((id) => id !== testId) : [...prev, testId]));
  };

  const getStatusIcon = (status: DiagnosticTest['status']) => {
    switch (status) {
      case 'passed': {
        return '✅';
      }
      case 'failed': {
        return '❌';
      }
      case 'warning': {
        return '⚠️';
      }
      case 'running': {
        return '🔄';
      }
      default: {
        return '⏳';
      }
    }
  };

  const getStatusColor = (status: DiagnosticTest['status']) => {
    switch (status) {
      case 'passed': {
        return 'text-green-600';
      }
      case 'failed': {
        return 'text-red-600';
      }
      case 'warning': {
        return 'text-yellow-600';
      }
      case 'running': {
        return 'text-blue-600';
      }
      default: {
        return 'text-gray-500';
      }
    }
  };

  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">System Diagnostics</h2>
            <p className="text-sm text-gray-600 mt-1">Test Bolt features and configuration</p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
          {/* Test Selection */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3">Select Tests to Run</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
              {allTests.map(test => (
                <label key={test.id} className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={selectedTests.includes(test.id)}
                    onChange={() => toggleTest(test.id)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <div>
                    <div className="font-medium text-sm">{test.name}</div>
                    <div className="text-xs text-gray-600">{test.description}</div>
                  </div>
                </label>
              ))}
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2 flex-wrap">
              <button
                onClick={() => runDiagnostics()}
                disabled={isRunning}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                {isRunning ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    Running Tests...
                  </>
                ) : (
                  <>
                    🧪 Run All Tests
                  </>
                )}
              </button>

              {selectedTests.length > 0 && (
                <button
                  onClick={() => runDiagnostics(selectedTests)}
                  disabled={isRunning}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  🎯 Run Selected ({selectedTests.length})
                </button>
              )}

              <button
                onClick={() => setSelectedTests(allTests.map(t => t.id))}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
              >
                Select All
              </button>

              <button
                onClick={() => setSelectedTests([])}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
              >
                Clear
              </button>
            </div>
          </div>

          {/* Results */}
          {result && (
            <div className="border-t border-gray-200 pt-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">Test Results</h3>
                <div className="text-sm text-gray-600">
                  {new Date(result.timestamp).toLocaleString()}
                </div>
              </div>

              {/* Summary */}
              <div className="grid grid-cols-4 gap-4 mb-6">
                <div className="bg-gray-50 p-3 rounded-lg text-center">
                  <div className="text-2xl font-bold text-gray-900">{result.summary.total}</div>
                  <div className="text-sm text-gray-600">Total</div>
                </div>
                <div className="bg-green-50 p-3 rounded-lg text-center">
                  <div className="text-2xl font-bold text-green-600">{result.summary.passed}</div>
                  <div className="text-sm text-green-600">Passed</div>
                </div>
                <div className="bg-yellow-50 p-3 rounded-lg text-center">
                  <div className="text-2xl font-bold text-yellow-600">{result.summary.warnings}</div>
                  <div className="text-sm text-yellow-600">Warnings</div>
                </div>
                <div className="bg-red-50 p-3 rounded-lg text-center">
                  <div className="text-2xl font-bold text-red-600">{result.summary.failed}</div>
                  <div className="text-sm text-red-600">Failed</div>
                </div>
              </div>

              {/* Detailed Results */}
              <div className="space-y-4">
                {result.tests.map(test => (
                  <TestResult key={test.id} test={test} />
                ))}
              </div>
            </div>
          )}

          {/* Quick Tips */}
          {!result && !isRunning && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6">
              <h4 className="font-medium text-blue-900 mb-2">💡 Quick Tips</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>• Run <strong>All Tests</strong> for a complete system health check</li>
                <li>• Use <strong>Selected Tests</strong> to focus on specific areas</li>
                <li>• Check <strong>Environment</strong> test first if having issues</li>
                <li>• <strong>Mock Model</strong> test ensures development mode works</li>
                <li>• <strong>Ollama</strong> warnings are normal if you haven't set it up</li>
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function TestResult({ test }: { test: DiagnosticTest }) {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <div className="border border-gray-200 rounded-lg overflow-hidden">
      <div
        className="p-4 cursor-pointer hover:bg-gray-50 transition-colors"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <span className="text-xl">{getStatusIcon(test.status)}</span>
            <div>
              <div className="font-medium">{test.name}</div>
              <div className="text-sm text-gray-600">{test.description}</div>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {test.duration && (
              <span className="text-xs text-gray-500">{test.duration}ms</span>
            )}
            <span className={`text-sm font-medium ${getStatusColor(test.status)}`}>
              {test.status.toUpperCase()}
            </span>
            <svg
              className={`w-4 h-4 transition-transform ${isExpanded ? 'rotate-180' : ''}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
        
        {test.message && (
          <div className="mt-2 text-sm text-gray-700">
            {test.message}
          </div>
        )}
      </div>

      {isExpanded && test.details && (
        <div className="border-t border-gray-200 p-4 bg-gray-50">
          <h5 className="font-medium mb-2">Details:</h5>
          <pre className="text-xs bg-white p-3 rounded border overflow-x-auto">
            {JSON.stringify(test.details, null, 2)}
          </pre>
        </div>
      )}
    </div>
  );
}

function getStatusIcon(status: DiagnosticTest['status']) {
  switch (status) {
    case 'passed':
      return '✅';
    case 'failed':
      return '❌';
    case 'warning':
      return '⚠️';
    case 'running':
      return '🔄';
    default:
      return '⏳';
  }
}

function getStatusColor(status: DiagnosticTest['status']) {
  switch (status) {
    case 'passed':
      return 'text-green-600';
    case 'failed':
      return 'text-red-600';
    case 'warning':
      return 'text-yellow-600';
    case 'running':
      return 'text-blue-600';
    default:
      return 'text-gray-500';
  }
}
